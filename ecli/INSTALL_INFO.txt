ECLI --

	1) Structure
	2) Installation
	3) Known problems
	4) Tested on ...

1. Structure

      ecli
	+- doc				-- documentation
	+- examples			-- examples
	|   +-	test1			-- table creation, insertions, selection, drop
	|   +-	isql			-- CLISQL : Command Line Interactive SQL 
	|   +-	qa_example		-- sample application for cursor generator
	|   +-	test_Xaction		-- transaction test program
	|   +-	test_gc			-- (obsolete) tests for problems with GC
	|   +-	test_rowset		-- tests rowset operations : insert, updates; show specific error handling
	|   +-	test_values		-- tests all ECLI_VALUE heirs
	|
	+- src
	|   +-	abstract			-- abstract ECLI data types
	|   +-	data				-- data transfer classes
	|   |      +-   arrayed                 -- arrayed data for 'bulk' transfer, reducing network traffic.
	|   +-	pattern				-- used pattern classes
	|   +-	metadata			-- various classes that help get metadata
	|   +-	spec				-- special classes
	|	   +-	C			-- C wrappers
	|	   +-	constants		-- classes that encapsulate various ODBC constants
	|	   +-	ise			-- ise specific
	|	   |	   +-	windows			Platform specific
	|	   |	   +-	linux
	|	   +-	se			-- SmallEiffel specific
	|	   |	   +-	windows		 	...
	|	   |	   +-	linux
	|	   +-	ve			-- Visual Eiffel specific
	|		   +-	windows		 	...
	|		   +-	linux	
	+- tools
	   +-	query_assistant		-- cursor classes generator

2. Installation

  NOTE for Linux/Unix (*n*x) users : 
	This package uses unixodbc, avalaible at http://www.unixodbc.org
	It has been tested with PostgreSQL 7.0.2 and 7.1.3.

	PLEASE, use the LATEST version available, to get the best benefits of this library.
	
  2.0 Define environment variables :
  	ECLI 		-  the ECLI directory
  	GOBO_OS 	-  DO NOT FORGET to set it especially under linux (set it to 'linux')  
	GOBO_CC		-  Windows specific: the C compiler you've used to compile the C wrapper library.
			   Supported 'keys' : lcc, msc, gcc.
			   
  2.1. Building the C library.
	
	** DO NOT TRUST libraries you would get from an archive; maybe they have not been
          built with a compiler compatible with your system **
	
	A) go to the src/spec/<eiffel_compiler>/<platform> - compiler - platform directory of your choice
	B) make the C wrapper library
		WIN32: ecli_${GOBO_CC}.lib  or 
		Unix/Linux: libecli_c.a
	
	Known problems : makefiles or .bat files are known to work, but problems may still remain.

  2.2. Building the samples

	Run the following command : geant compile_<eiffel_compiler>
	where <eiffel_compiler> is 'se', 've', 'ise'
	

3. Known Problems

	Linux/Unix

Intallation problems when building unixodbc while your system already has one.  
This problem appeared on SUSE systems.  
PLEASE : find the ODBC.INI and ODBCINST.INI files.
Verify that the datasources and drivers you've defined point to the unixodbc-provided drivers.

	SmartEiffel 1.0
Do NOT use manifest arrays to initialize the results-cursor or the parameters of a statement.
SmartEiffel does not infer the good ARRAY-type, compiles OK, but application crashes at runtime !

4. Tested on ...

	OS			Database		Driver
	----------		----------		---------
	WIN98			Access			MS
	WIN98			Interbase61		Easysoft IB6
	WINNT4			Oracle8			Oracle
	WINNT4			Access			MS
	WIN2000			Access, 		MS
				MS SQL Server,		MS 
				SQLITE			SQLITE
				Interbase61		IBPhoenix ODBC driver
	Linux Caldera 2.3	PostgreSQL 7.0.2	UnixODBC
	Linux Caldera 2.3	PostgreSQL 7.1.3	UnixODBC
	Suse Linux		PostgreSQL 7.1.3	UnixODBC
	Debian Linux 3.0r	PostgreSQL 7.1.3	UnixODBC
